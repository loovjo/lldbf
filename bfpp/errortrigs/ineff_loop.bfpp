declare (a: Byte) at a

// Case 1: Zero from start
to a [-]

// Case 2: Zero from clear

, [>]
[-]

// Case 3: known inside macro
def zero_check(a: Byte, b: Byte, c: Byte) at b {
    to a [-] [-]
}

// Negative case 1: recursive loop

declare (a: Byte, b: Byte) at a

+++ [
    to b [-] // Should not be optimized, b is changed later in the loop
    to b +
    to a
]