#include hexdigit.bfpp
#include std.bfpp


// Adds to 4-bit numbers together, stores into a
def add_nibble_carry(a: Byte, b: Byte, carry: Byte, tmp1: Byte, tmp2: Byte) at a {
    to tmp1 [-]
    to tmp2 [-]
    to carry [-]
    // a + b > 16
    // a > 16 - b = b_inv

    // To check if a > 16 - b, we will subtract 16 - b from a, and see if a doesn't hit 0 on the way there
    // This will leave a with a value of a - (16 - b) = a + b - 16
    // We can make this (a + b) mod 16 by checking the carry

    declare (b_inv) with b_inv at tmp1
    undeclare (tmp1)

    run add16(b_inv, tmp2)
    to b [ to b_inv - to b - ]

    declare (tmp3) with tmp3 at b
    undeclare (b)

    to carry +
    to b_inv [
        // Check if a is zero

        // Move a to tmp2, set tmp3 = a == 0
        to tmp3 +
        to a [ to tmp2 + to tmp3 [-] to a - ]

        // Move tmp2 back to a
        to tmp2 [ to a + to tmp2 - ]

        // If tmp3, we'll reset carry
        to tmp3 [ to carry [-] to tmp3 - ]

        to a -
        to b_inv -
    ]

    // If we don't have carry, the value of a is a + b - 16
    // So we want to add 16 to it

    // To do that, we'll add 16, and subtract 16 if we have carry
    run add16(a, tmp3)

    to carry [
        run dec16(a, tmp3)
        to tmp2 +
        to carry -
    ]
    to tmp2 [ to carry + to tmp2 - ]
}


// TODO Generate all of this automatically

struct u8 {
    n4: Byte,
    n0: Byte,
}

def add_u8_carry(a: u8, b: u8, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)
    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)
}

def copy_u8(a: u8, b: u8, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
}

def print_u8_hex(a: u8, tmp1: Byte, tmp2: Byte) at a.n4 {
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u8_hex(a: u8, tmp1: Byte, tmp2: Byte) at a.n4 {
    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)

    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

struct u16 {
    n12: Byte,
    n8: Byte,
    n4: Byte,
    n0: Byte,
}

def add_u16_carry(a: u16, b: u16, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)

    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)

    to carry [ to a.n8 + to carry - ]
    run add_nibble_carry(a.n8, b.n8, carry, tmp1, tmp2)

    to carry [ to a.n12 + to carry - ]
    run add_nibble_carry(a.n12, b.n12, carry, tmp1, tmp2)
}

def copy_u16(a: u16, b: u16, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
    run copy(a.n8, b.n8, tmp)
    run copy(a.n12, b.n12, tmp)
}

def print_u16_hex(a: u16, tmp1: Byte, tmp2: Byte) at a.n12 {
    run digit2hex(a.n12, tmp1, tmp2)
    to a.n12 .
    run digit2hex(a.n8, tmp1, tmp2)
    to a.n8 .
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u16_hex(a: u16, tmp1: Byte, tmp2: Byte) at a.n12 {
    to a.n12 ,
    run hex2digit(a.n12, tmp1, tmp2)

    to a.n8 ,
    run hex2digit(a.n8, tmp1, tmp2)

    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)

    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

struct u32 {
    n28: Byte,
    n24: Byte,
    n20: Byte,
    n16: Byte,

    n12: Byte,
    n8: Byte,
    n4: Byte,
    n0: Byte,
}

def add_u32_carry(a: u32, b: u32, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)

    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)

    to carry [ to a.n8 + to carry - ]
    run add_nibble_carry(a.n8, b.n8, carry, tmp1, tmp2)

    to carry [ to a.n12 + to carry - ]
    run add_nibble_carry(a.n12, b.n12, carry, tmp1, tmp2)


    to carry [ to a.n16 + to carry - ]
    run add_nibble_carry(a.n16, b.n16, carry, tmp1, tmp2)

    to carry [ to a.n20 + to carry - ]
    run add_nibble_carry(a.n20, b.n20, carry, tmp1, tmp2)

    to carry [ to a.n24 + to carry - ]
    run add_nibble_carry(a.n24, b.n24, carry, tmp1, tmp2)

    to carry [ to a.n28 + to carry - ]
    run add_nibble_carry(a.n28, b.n28, carry, tmp1, tmp2)
}

def copy_u32(a: u32, b: u32, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
    run copy(a.n8, b.n8, tmp)
    run copy(a.n12, b.n12, tmp)

    run copy(a.n16, b.n16, tmp)
    run copy(a.n20, b.n20, tmp)
    run copy(a.n24, b.n24, tmp)
    run copy(a.n28, b.n28, tmp)
}

def print_u32_hex(a: u32, tmp1: Byte, tmp2: Byte) at a.n28 {
    run digit2hex(a.n28, tmp1, tmp2)
    to a.n28 .
    run digit2hex(a.n24, tmp1, tmp2)
    to a.n24 .
    run digit2hex(a.n20, tmp1, tmp2)
    to a.n20 .
    run digit2hex(a.n16, tmp1, tmp2)
    to a.n16 .

    run digit2hex(a.n12, tmp1, tmp2)
    to a.n12 .
    run digit2hex(a.n8, tmp1, tmp2)
    to a.n8 .
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u32_hex(a: u32, tmp1: Byte, tmp2: Byte) at a.n28 {
    to a.n28 ,
    run hex2digit(a.n28, tmp1, tmp2)
    to a.n24 ,
    run hex2digit(a.n24, tmp1, tmp2)
    to a.n20 ,
    run hex2digit(a.n20, tmp1, tmp2)
    to a.n16 ,
    run hex2digit(a.n16, tmp1, tmp2)

    to a.n12 ,
    run hex2digit(a.n12, tmp1, tmp2)
    to a.n8 ,
    run hex2digit(a.n8, tmp1, tmp2)
    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)
    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

declare (a: u32, b: u32, tmp1, tmp2, tmp3) at a.n28

run read_u32_hex(a, tmp1, tmp2)
run read_u32_hex(b, tmp1, tmp2)
run add_u32_carry(a, b, tmp1, tmp2, tmp3)
run print_u32_hex(a, tmp1, tmp2)
